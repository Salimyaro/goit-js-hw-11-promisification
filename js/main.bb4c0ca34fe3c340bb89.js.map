{"version":3,"sources":["webpack://goit-js-hw-11-promisification/./src/js/task-1.js","webpack://goit-js-hw-11-promisification/./src/js/task-2.js","webpack://goit-js-hw-11-promisification/./src/js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount"],"mappings":"0KAAA,IAAMA,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAACC,GAAD,OAAUC,QAAQC,IAAR,yBAA8BF,EAA9B,QAEzBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,I,+rBCZjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAOb,QAAQC,QACbW,EAASE,KAAI,SAACC,GAAD,OACXA,EAAKN,OAASI,EAAd,OAA8BE,GAA9B,IAAoCL,QAASK,EAAKL,SAAWK,OAK7DZ,EAAS,SAACa,GAAD,OAAkBX,QAAQY,MAAMD,IAE/CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,I,SClBnC,IAIMe,EAAkB,SAACC,GACvB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDnB,YAAW,WACUqB,KAAKE,SAAW,IAEjCxB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEtCsB,EAAOD,EAAYO,MAClB5B,OAGD6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,sBAA2BoB,EAA3B,yBAA8CtB,EAA9C,QAGIwB,EAAW,SAACF,GAChBrB,QAAQwB,KAAR,uCAA6CH,EAA7C,+BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAA9C,MAAgEC,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAA9C,MAAgEC,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAA7C,MAA+DC,GAC/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAA9C,MAAgEC,K","file":"js/main.bb4c0ca34fe3c340bb89.js","sourcesContent":["const delay = (ms) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);\r\n","const users = [\r\n  { name: \"Mango\", active: true },\r\n  { name: \"Poly\", active: false },\r\n  { name: \"Ajax\", active: true },\r\n  { name: \"Lux\", active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return Promise.resolve(\r\n    allUsers.map((user) =>\r\n      user.name === userName ? { ...user, active: !user.active } : user\r\n    )\r\n  );\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      }\r\n      reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}